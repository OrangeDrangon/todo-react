{"version":3,"sources":["utils/generateSpotifyAuthUrl.util.ts","components/App/App.component.tsx","serviceWorker.ts","index.tsx"],"names":["generateSpotifyAuthUrl","_ref","client_id","redirect_uri","response_type","scopes","show_dialog","state","concat","encodeURIComponent","join","App","_useState","useState","_useState2","Object","slicedToArray","token","setToken","useEffect","cancelled","asyncToGenerator","regenerator_default","a","mark","_callee","params","requestContents","spotifyResponse","wrap","_context","prev","next","qs","parse","window","location","hash","access_token","href","stop","useCallback","_callee2","unparsed","json","_context2","fetch","method","headers","sent","abrupt","t0","console","log","react_default","createElement","Boolean","hostname","match","ReactDOM","render","App_component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+MAEaA,EAAyB,SAAAC,GAOF,IANlCC,EAMkCD,EANlCC,UACAC,EAKkCF,EALlCE,aACAC,EAIkCH,EAJlCG,cACAC,EAGkCJ,EAHlCI,OACAC,EAEkCL,EAFlCK,YACAC,EACkCN,EADlCM,MAIA,0DAAAC,OAA2DN,EAA3D,kBAAAM,OAAqFC,mBACnFN,GADF,WAAAK,OAGEH,EAASA,EAAOK,KAAK,KAAO,GAH9B,mBAAAF,OAIkBJ,EAJlB,WAAAI,OAIyCD,GAAgB,GAJzD,iBAAAC,OAKEF,GAA4B,UCqDjBK,EA1DO,WAAM,IAAAC,EACAC,mBAAgB,MADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACZI,EADYJ,EAAA,GAG1BK,oBAAU,WACR,IAAIC,GAAY,EA8BhB,OA7BKH,GACHF,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAC,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAAN,EAAAC,EAAAM,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,QACON,EAASO,IAAGC,MAAMC,OAAOC,SAASC,OAC5BC,cAeJV,EAAmBF,EAGpBN,GACHF,EAASU,EAAgBU,cAG3BH,OAAOC,SAASC,KAAO,KArBjBV,EAAwC,CAC5CzB,UAAW,mCACXC,aAAc,wBACdC,cAAe,QACfC,OAAQ,CACN,YACA,sBACA,kBACA,sBAGJ8B,OAAOC,SAASG,KAAOvC,EAAuB2B,IAdjD,wBAAAG,EAAAU,SAAAf,KAADV,GA4BK,WACLK,GAAY,IAEb,CAACH,IAEgBwB,sBAAW1B,OAAAM,EAAA,EAAAN,CAAAO,EAAAC,EAAAC,KAAC,SAAAkB,IAAA,IAAAC,EAAAC,EAAA,OAAAtB,EAAAC,EAAAM,KAAA,SAAAgB,GAAA,cAAAA,EAAAd,KAAAc,EAAAb,MAAA,cAAAa,EAAAd,KAAA,EAAAc,EAAAb,KAAA,EAELc,MACrB,uDACA,CACEC,OAAQ,MACRC,QAAS,CAAC,CAAC,gBAAD,UAAAxC,OAA4BS,OANd,cAEtB0B,EAFsBE,EAAAI,KAAAJ,EAAAb,KAAA,EASTW,EAASC,OATA,cAStBA,EATsBC,EAAAI,KAAAJ,EAAAK,OAAA,SAUrBN,GAVqB,QAAAC,EAAAd,KAAA,GAAAc,EAAAM,GAAAN,EAAA,SAY5BO,QAAQC,IAARR,EAAAM,IAZ4B,yBAAAN,EAAAL,SAAAE,EAAA,kBAc7B,CAACzB,IAEJ,OAAOqC,EAAA/B,EAAAgC,cAAA,WAAMtC,ICvDKuC,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAASC,MACvB,2DCVNC,IAASC,OAAON,EAAA/B,EAAAgC,cAACM,EAAD,MAASC,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7eece38b.chunk.js","sourcesContent":["import { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\n\nexport const generateSpotifyAuthUrl = ({\n  client_id,\n  redirect_uri,\n  response_type,\n  scopes,\n  show_dialog,\n  state\n}: ISpotifyTokenRequest): string => {\n  // https://developer.spotify.com/documentation/general/guides/authorization-guide/\n  // Implicit flow\n  return `https://accounts.spotify.com/authorize?client_id=${client_id}&redirect_uri=${encodeURIComponent(\n    redirect_uri\n  )}&scope=${\n    scopes ? scopes.join(\" \") : \"\"\n  }&response_type=${response_type}&state=${state ? state : \"\"}&show_dialog=${\n    show_dialog ? show_dialog : \"false\"\n  }`;\n};\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport qs from \"query-string\";\n\nimport { generateSpotifyAuthUrl } from \"utils/generateSpotifyAuthUrl.util\";\nimport { ISpotifyTokenRequest } from \"interfaces/ISpotifyTokenRequest.interface\";\nimport { ISpotifyTokenResponse } from \"interfaces/ISpotifyTokenResponse.interface\";\n\n// import classes from \"./App.module.scss\";\n\ntype Token = string | null;\n\nconst App: React.FC = () => {\n  const [token, setToken] = useState<Token>(null);\n\n  useEffect(() => {\n    let cancelled = false;\n    if (!token) {\n      (async () => {\n        const params = qs.parse(window.location.hash);\n        if (!params.access_token) {\n          const requestContents: ISpotifyTokenRequest = {\n            client_id: \"7ff4c2742b1d4e91b297c2ef6bf8d041\",\n            redirect_uri: \"http://localhost:3000\",\n            response_type: \"token\",\n            scopes: [\n              \"streaming\",\n              \"user-read-birthdate\",\n              \"user-read-email\",\n              \"user-read-private\"\n            ]\n          };\n          window.location.href = generateSpotifyAuthUrl(requestContents);\n        } else {\n          // We know it is this type at this point so we cast to it\n          const spotifyResponse = (params as unknown) as ISpotifyTokenResponse;\n\n          // If the effect has not been cancelled we set the state\n          if (!cancelled) {\n            setToken(spotifyResponse.access_token);\n          }\n          // Removes tokens from the url\n          window.location.hash = \"\";\n        }\n      })();\n    }\n    return () => {\n      cancelled = true;\n    };\n  }, [token]);\n\n  const getFeatured = useCallback(async () => {\n    try {\n      const unparsed = await fetch(\n        \"https://api.spotify.com/v1/browse/featured-playlists\",\n        {\n          method: \"GET\",\n          headers: [[\"Authorization\", `Bearer ${token}`]]\n        }\n      );\n      const json = await unparsed.json();\n      return json;\n    } catch (error) {\n      console.log(error);\n    }\n  }, [token]);\n\n  return <div>{token}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"components/App/App.component\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}